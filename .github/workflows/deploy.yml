name: Build & Deploy to Cloud Run

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  REGION: ${{ vars.GCP_REGION }}
  REPO_NAME: ${{ vars.ARTIFACT_REPO }}
  SERVICE: ${{ vars.SERVICE_NAME }}
  IMAGE: ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REPO }}/${{ vars.SERVICE_NAME }}:${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GIT_PAT || github.token }}

      - name: Authenticate to Google Cloud (service account key)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker "${{ env.REGION }}-docker.pkg.dev" --quiet

      - name: Show repo tree (debug)
        run: |
          pwd
          ls -la
          echo "Dockerfiles I can see:"
          find . -maxdepth 3 -type f -name 'Dockerfile' -print || true
          echo "Current directory contents:"
          ls -la
          echo "Checking if Dockerfile exists:"
          if [[ -f "Dockerfile" ]]; then
            echo "✅ Dockerfile found in current directory"
            cat Dockerfile | head -5
          else
            echo "❌ Dockerfile NOT found in current directory"
          fi

      - name: Build container
        run: |
          echo "Building from directory: $(pwd)"
          echo "Dockerfile exists: $([[ -f Dockerfile ]] && echo 'YES' || echo 'NO')"
          docker build -f "Dockerfile" -t "${{ env.IMAGE }}" .

      - name: Push container
        run: docker push "${{ env.IMAGE }}"

      - name: Deploy to Cloud Run
        shell: bash
        run: |
          gcloud run deploy "${{ env.SERVICE }}" \
            --image "${{ env.IMAGE }}" \
            --region "${{ env.REGION }}" \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars "PORT=8080" \
            --set-env-vars "HOST=0.0.0.0" \
            --set-env-vars "ENVIRONMENT=prod" \
            --set-env-vars "NLWEB_CONFIG_DIR=/app/NLWeb/config" \
            --set-env-vars "NLWEB_OUTPUT_DIR=/app" \
            --set-env-vars "PYTHONPATH=/app/NLWeb/code/python" \
            --set-env-vars "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" \
            --set-env-vars "NUTRISLICE_API_URL=${{ vars.NUTRISLICE_API_URL }}" \
            --set-env-vars "DINING_HALL_SLUGS=${{ vars.DINING_HALL_SLUGS }}" \
            --set-env-vars "MEAL_TYPES=${{ vars.MEAL_TYPES }}" \
            --set-env-vars "RAW_DIR=/app/NLWeb/raw_menus" \
            --set-env-vars "JSONLD_DIR=/app/NLWeb/data/jsonld" \
            --set-env-vars "NLWEB_JSON_DATA_DIR=/app/NLWeb/data/jsonld" \
            --set-env-vars "NLWEB_CACHE_DIR=/app/NLWeb/.cache" \
            --quiet

      - name: Show service URL
        run: |
          URL=$(gcloud run services describe "${{ env.SERVICE }}" --region "${{ env.REGION }}" --format='value(status.url)')
          echo "Cloud Run URL: $URL"
          echo "Cloud Run URL: $URL" >> $GITHUB_STEP_SUMMARY