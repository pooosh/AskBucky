name: Build & Deploy to Cloud Run

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  REGION: ${{ vars.GCP_REGION }}
  REPO_NAME: ${{ vars.ARTIFACT_REPO }}
  SERVICE: ${{ vars.SERVICE_NAME }}
  IMAGE: ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REPO }}/${{ vars.SERVICE_NAME }}:${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GIT_PAT || github.token }}

      - name: Authenticate to Google Cloud (service account key)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker "${{ env.REGION }}-docker.pkg.dev" --quiet

      - name: Show repo tree (debug)
        run: |
          pwd
          ls -la
          echo "Dockerfiles I can see:"
          find . -maxdepth 3 -type f -name 'Dockerfile' -print || true

      - name: Locate Dockerfile
        id: df
        shell: bash
        run: |
          set -euo pipefail
          candidates=(
            "Dockerfile"
            "AskBucky/Dockerfile"
            "NLWeb/Dockerfile"
            "docker/Dockerfile"
          )
          found=""
          for f in "${candidates[@]}"; do
            if [[ -f "$f" ]]; then
              found="$f"
              break
            fi
          done
          if [[ -z "$found" ]]; then
            echo "No Dockerfile found in: ${candidates[*]}" >&2
            exit 1
          fi
          echo "Using Dockerfile: $found"
          echo "dockerfile=$found" >> "$GITHUB_OUTPUT"

      - name: Build container
        run: docker build -f "${{ steps.df.outputs.dockerfile }}" -t "${{ env.IMAGE }}" .

      - name: Push container
        run: docker push "${{ env.IMAGE }}"
      - name: Deploy to Cloud Run
        shell: bash
        run: |
          # Create environment variables file to avoid gcloud syntax issues
          cat > env.yaml << EOF
          HOST: "0.0.0.0"
          ENVIRONMENT: "prod"
          NLWEB_CONFIG_DIR: "/app/NLWeb/config"
          NLWEB_OUTPUT_DIR: "/app"
          PYTHONPATH: "/app/NLWeb/code/python"
          OPENAI_API_KEY: "${{ secrets.OPENAI_API_KEY }}"
          NUTRISLICE_API_URL: "${{ vars.NUTRISLICE_API_URL }}"
          DINING_HALL_SLUGS: "${{ vars.DINING_HALL_SLUGS }}"
          MEAL_TYPES: "${{ vars.MEAL_TYPES }}"
          RAW_DIR: "/app/NLWeb/raw_menus"
          JSONLD_DIR: "/app/NLWeb/data/jsonld"
          NLWEB_JSON_DATA_DIR: "/app/NLWeb/data/jsonld"
          NLWEB_CACHE_DIR: "/app/NLWeb/.cache"
          QDRANT_URL: "${{ secrets.QDRANT_URL }}"
          QDRANT_API_KEY: "${{ secrets.QDRANT_API_KEY }}"
          EOF

          gcloud run deploy "${{ env.SERVICE }}" \
            --image "${{ env.IMAGE }}" \
            --region "${{ env.REGION }}" \
            --platform managed \
            --allow-unauthenticated \
            --env-vars-file env.yaml \
            --quiet

      - name: Show service URL
        run: |
          URL=$(gcloud run services describe "${{ env.SERVICE }}" --region "${{ env.REGION }}" --format='value(status.url)')
          echo "Cloud Run URL: $URL"
          echo "Cloud Run URL: $URL" >> $GITHUB_STEP_SUMMARY
